[{"id":0,"href":"/docs/chaptor1/my-first-doc/","title":"My First Doc","section":"章节一","content":"\r一级标题\r#\r二级标题\r#\r三级标题\r#\r"},{"id":1,"href":"/docs/chaptor1/","title":"章节一","section":"Docs","content":"\r一级标题\r#\r二级标题\r#\r三级标题\r#\r"},{"id":2,"href":"/docs/chaptor3/","title":"章节三","section":"Docs","content":"\r一级标题\r#\r二级标题\r#\r三级标题\r#\r"},{"id":3,"href":"/docs/chaptor2/","title":"章节二","section":"Docs","content":"\r一级标题\r#\r二级标题\r#\r三级标题\r#\r"},{"id":4,"href":"/docs/serviceGovernance/API-Gateway/apiGatawaySpringGateway/","title":"API 网关-SpringCloud Gateway","section":"API Gateway","content":"\nFeatures [0]\r#\rBuilt on Spring Framework 5, Project Reactor and Spring Boot 2.0 Able to match routes on any request attribute. Predicates and filters are specific to routes. Circuit Breaker integration. Spring Cloud DiscoveryClient integration Easy to write Predicates and Filters Request Rate Limiting Path Rewriting 核心概念 [1][2]\r#\r路由（Route）\nid：路由标识，要求唯一，名称任意（默认值 uuid，一般不用，需要自定义） uri：请求最终被转发到的目标地址 order： 路由优先级，数字越小，优先级越高 predicates：断言数组，即判断条件，如果返回值是boolean，则转发请求到 uri 属性指定的服务中 filters：过滤器数组，在请求传递过程中，对请求做一些修改 谓词、断言（Predicate） 允许开发人员匹配 HTTP 请求中的内容，比如请求头或请求参数，最后根据匹配结果返回一个布尔值。参照 Java8 的新特性Predicate.\n过滤器（Filter） 可以在返回请求之前或之后修改请求和响应的内容。\n路由（Route）[1][2]\r#\r服务发现-集成nacos服务注册中心 [2]\r#\r服务路由配置 spring: cloud: gateway: routes: - id: gateway-provider_1 ## 使用了lb形式，从注册中心负载均衡的获取uri uri: lb://gateway-provider ## 配置断言 predicates: - Path=/gateway/provider/** filters: - AddResponseHeader=X-Response-Foo, Bar 自动路由配置 # enabled：默认为false，设置为true表明spring cloud gateway开启服务发现和路由的功能，网关自动根据注册中心的服务名为每个服务创建一个router，将以服务名开头的请求路径转发到对应的服务 spring.cloud.gateway.discovery.locator.enabled = true # lowerCaseServiceId：启动 locator.enabled=true 自动路由时，路由的路径默认会使用大写ID，若想要使用小写ID，可将lowerCaseServiceId设置为true spring.cloud.gateway.discovery.locator.lower-case-service-id = true 动态路由-整合 Apollo [2]\r#\r/** * Apollo路由更改监听刷新 */ @Configuration public class GatewayPropertRefresher implements ApplicationContextAware, ApplicationEventPublisherAware { ... /** * 监听路由修改 */ @ApolloConfigChangeListener(interestedKeyPrefixes = \u0026#34;spring.cloud.gateway.\u0026#34;) public void onChange(ConfigChangeEvent changeEvent) { refreshGatewayProperties(changeEvent); } /** * 刷新路由信息 */ private void refreshGatewayProperties(ConfigChangeEvent changeEvent) { logger.info(\u0026#34;gateway网关配置 刷新开始！\u0026#34;); preDestroyGatewayProperties(changeEvent); //更新配置 this.applicationContext.publishEvent(new EnvironmentChangeEvent(changeEvent.changedKeys())); //更新路由 refreshGatewayRouteDefinition(); logger.info(\u0026#34;gateway网关配置 刷新完成！\u0026#34;); } ... } 动态路由-整合nacos [3]\r#\r@Component @Slf4j public class NacosDynamicRouteService implements ApplicationEventPublisherAware { private String dataId = \u0026#34;gateway-router\u0026#34;; private String group = \u0026#34;DEFAULT_GROUP\u0026#34;; @Value(\u0026#34;${spring.cloud.nacos.config.server-addr}\u0026#34;) private String serverAddr; @Autowired private RouteDefinitionWriter routeDefinitionWriter; private ApplicationEventPublisher applicationEventPublisher; private static final List\u0026lt;String\u0026gt; ROUTE_LIST = new ArrayList\u0026lt;\u0026gt;(); @PostConstruct public void dynamicRouteByNacosListener() { try { ConfigService configService = NacosFactory.createConfigService(serverAddr); configService.getConfig(dataId, group, 5000); configService.addListener(dataId, group, new Listener() { @Override public void receiveConfigInfo(String configInfo) { clearRoute(); try { if (StringUtil.isNullOrEmpty(configInfo)) {//配置被删除 return; } List\u0026lt;RouteDefinition\u0026gt; gatewayRouteDefinitions = JSONObject.parseArray(configInfo, RouteDefinition.class); for (RouteDefinition routeDefinition : gatewayRouteDefinitions) { addRoute(routeDefinition); } publish(); } catch (Exception e) { log.error(\u0026#34;receiveConfigInfo error\u0026#34; + e); } } @Override public Executor getExecutor() { return null; } }); } catch (NacosException e) { log.error(\u0026#34;dynamicRouteByNacosListener error\u0026#34; + e); } } private void clearRoute() { for (String id : ROUTE_LIST) { this.routeDefinitionWriter.delete(Mono.just(id)).subscribe(); } ROUTE_LIST.clear(); } private void addRoute(RouteDefinition definition) { try { routeDefinitionWriter.save(Mono.just(definition)).subscribe(); ROUTE_LIST.add(definition.getId()); } catch (Exception e) { log.error(\u0026#34;addRoute error\u0026#34; + e); } } 谓词、断言（Predicate）[1][2]\r#\r过滤器（Filter）[1][2]\r#\r生命周期\nPRE POST 作用范围\nGatewayFilter 局部过滤器 默认预定义 限流 GlobalFilter 全局过滤器 自定义全局过滤器 统一鉴权过滤器 稳定性\r#\r熔断降级-Hystrix [3]\r#\rserver.port: 8082 spring: application: name: gateway redis: host: localhost port: 6379 password: 123456 cloud: gateway: routes: ## - id: rateLimit_route uri: http://localhost:8000 order: 0 predicates: ## - Path=/test/** filters: ## - StripPrefix=1 - name: Hystrix args: name: fallbackCmdA fallbackUri: forward:/fallbackA hystrix.command.fallbackCmdA.execution.isolation.thread.timeoutInMilliseconds: 5000 流控和降级-Sentinel [3]\r#\r高可用网关[1]\r#\rNginx负载均衡到部署的多个Gateway\n参考\r#\rspring-cloud-gateway\n2021最新(完整版)Gateway教学-第二代微服务网关组件SpringCloud-Gateway *** V\nSpring Cloud Gateway 服务网关的部署与使用详细介绍\nSpringCloud gateway （史上最全） 尼恩\n3W字吃透：微服务网关SpringCloud gateway底层原理和实操 尼恩 未\n"},{"id":5,"href":"/docs/serviceGovernance/API-Gateway/apiGatawayApisix/","title":"API 网关-apisix","section":"API Gateway","content":"\napisix特性\r#\rCore api聚合 灰度发布 稳定性 服务熔断 故障注入 流量复制 云原生 多云，混合云 容器友好 随意扩缩容 apisix功能\r#\r动态配置，不用reload\n路由, ssl证书，上游，插件\u0026hellip; 插件化(40个)\n身份验证, 安全, 日志, 可观察性\u0026hellip; 对接Prom，zipkin， skywalking grpc代理和协议转换(rest \u0026lt;-\u0026gt; gprc) apisix只用了nginx的网络层 apisix使用场景\r#\r处理L4, L7层流量 代替nginx处理南北流量 代替envoy处理东西流量 k8s ingress controller 参考\r#\r【云原生学院 #3】基于 Apache APISIX 的全流量 API 网关 *** "},{"id":6,"href":"/docs/serviceGovernance/API-Gateway/apiGateway/","title":"API Gateway网关","section":"API Gateway","content":"\n特性\r#\r路由 灰度发布 反向代理,负载均衡 鉴权 限流 监控 缓存 分类\r#\r入口网关 出口网关 框架\r#\r产品 技术 {% post_link \u0026lsquo;apiGatawayApisix\u0026rsquo; apisix%} self lua + Nginx Kong lua + Nginx Zuul Spring Cloud Netflix {% post_link \u0026lsquo;apiGatawaySpringGateway\u0026rsquo; Gateway %} self Spring Cloud Traefik Golang 实现 [3]\r#\r扩展性\n责任链模式 - Zuul filter, Envoy filter 性能\n多路 I/O 复用模型 和 线程池 可用性\n线程池 服务隔离 API Gateway+BFF\r#\rAPI Gateway + BFF [3]\r#\r流量网关 + 业务网关\nBFF 聚合网关 [2]\r#\r参考\r#\r使用 API 网关构建微服务 微服务架构：BFF和网关是如何演化出来的？ 《27 | API网关：系统的门面要如何做呢？》 百亿规模API网关服务Shepherd的设计与实现 点评 未 Go to Page self "}]